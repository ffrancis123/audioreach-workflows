---
name: _build
description: Reusable workflow for build instructions

on:
  workflow_call:
    inputs:
      build_args:
        required: true
        type: string
        description: Required build arguments

      build_script:
        required: false
        type: string
        default: 'ci/build.sh'
        description: Optional build script to run inside the docker container
        # This script is used to build the project inside the docker container

      sync_script:
        required: false
        type: string
        default: 'ci/sync.sh'
        description: Optional sync script to run inside the docker container
        # This script is used to sync the repository with the latest changes before building

      apply_patch_script:
        required: false
        type: string
        default: 'ci/apply_patch.sh'
        description: Optional script to apply patches before building
        # This script is used to apply any patches to the repository before building
      
      config_script:
        required: false
        type: string
        default: 'ci/config.sh'
        description: Optional script to configure the build environment
        # This script contains the repositories and patches information for the build

      event_name:
        required: false
        type: string
        description: Optional event name to use for building
        default: ${{ github.event_name }}

      pr_ref:
        required: false
        type: string
        description: Optional pull request reference to use for building
        default: ${{ github.event.pull_request.head.ref }}

      pr_repo:
        required: false
        type: string
        description: Optional pull request repository to use for building
        default: ${{ github.event.pull_request.head.repo.full_name }}

      base_ref:
        required: false
        type: string
        description: Optional base reference to use for building
        default: ${{ github.ref_name }}

# Use qcs6490 sdk for compiling, as sdk is similar for all the targets
env:
  SDK_NAME: poky-glibc-x86_64-core-image-base-armv8-2a-qcs6490-rb3gen2-core-kit-toolchain-5.2.sh


jobs:
  build:
    runs-on:
      group: GHA-Audioreach-SelfHosted-RG
      labels: [ self-hosted, self-hosted, audior-prd-u2204-x64-large-od-ephem ]
    strategy:
      fail-fast: false
    steps:
      - name: Build docker Image
        id: get-docker-image
        uses: AudioReach/audioreach-workflows/.github/actions/build_docker_image@master

      - name: Sync Codebase
        id: sync
        uses: AudioReach/audioreach-workflows/.github/actions/sync@master
        with:
          event_name: ${{ inputs.event_name }}
          pr_ref: ${{ inputs.pr_ref }}
          pr_repo: ${{ inputs.pr_repo }}
          base_ref: ${{ inputs.base_ref }}

      - name: Pull SDK sh file
        id: pull_sdk
        uses: AudioReach/audioreach-workflows/.github/actions/aws-s3-exchanger@master
        with:
          s3_bucket: qli-prd-audior-gh-artifacts
          download_filename: ${{ env.SDK_NAME }}
          mode: download
          location: AudioReach/meta-ar/post_merge_build

      - name: Setup Directory Structure
        run: mkdir -p install/tmp

      - name: Run SDK Script
        id: run_sdk
        shell: bash
        run: |
          echo "Running SDK Script"
          echo "./install" | ./${{ env.SDK_NAME }}
          echo "SDK Script ran successfully"

      - name: Extract Kernel Version
        id: extract_kernel_version
        shell: bash
        run: |
          echo "Extracting Kernel Version"
          kernel_version=$(ls ${{ github.workspace }}/install/sysroots/armv8-2a-poky-linux/usr/lib/modules/ | sort -V | tail -n 1)
          echo "Kernel Version: $kernel_version"
          echo "KERNEL_VERSION=${kernel_version}" >> "$GITHUB_OUTPUT"

      - name: Build
        id: build
        uses: AudioReach/audioreach-workflows/.github/actions/build@master
        with:
          docker_image: ${{ steps.get-docker-image.outputs.image_name }}
        env:
          BUILD_ARGS: ${{ inputs.build_args }}
          BUILD_SCRIPT: ${{ inputs.build_script }}
          SYNC_SCRIPT: ${{ inputs.sync_script }}
          APPLY_PATCH_SCRIPT: ${{ inputs.apply_patch_script }}
          CONFIG_SCRIPT: ${{ inputs.config_script }}
          KERNEL_VERSION: ${{ steps.extract_kernel_version.outputs.KERNEL_VERSION }}

      - name: Clean Up Workspace
        if: always() 
        shell: bash
        run: |
          echo "Cleaning Up Workspace"
          rm -rf install/ ${{ env.SDK_NAME }}
          rm -rf build/ ${{ github.workspace }}/build.tar
          echo "Workspace cleaned up successfully"
